<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:InformationRetrievalManager"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">

    <!--  TextBox Input (with placeholder)  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type TextBox}">

        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{StaticResource DosisMedium}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
        <Setter Property="Foreground" Value="{StaticResource InputForegroundBrushKey}" />
        <Setter Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
        <Setter Property="BorderThickness" Value="0,0,0,2" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">

                    <Grid>
                        <Border
                            x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                        </Border>

                        <!--  Placeholder  -->
                        <TextBlock
                            Padding="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="Center"
                            FontFamily="{StaticResource DosisMedium}"
                            Foreground="{StaticResource InputPlaceholderForegroundBrushKey}"
                            IsHitTestVisible="False"
                            Text="{TemplateBinding Tag}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value="">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>

                        </TextBlock>

                        <!--  Validation exclamation mark  -->
                        <TextBlock
                            Name="exclamation"
                            Margin="0,0,10,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            FontFamily="{StaticResource FontAwesomeSolid}"
                            Foreground="{StaticResource InputErrorBorderBackgroundBrushKey}"
                            IsHitTestVisible="False"
                            Text="{StaticResource FontAwesomeExclamationCircleIcon}"
                            Visibility="Collapsed" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--  Is Disabled  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{StaticResource InputDisabledBackgroundBrushKey}" />
                            <Setter Property="Foreground" Value="{StaticResource InputDisabledForegroundBrushKey}" />
                        </Trigger>
                        <!--  Hover  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                        </Trigger>
                        <!--  Focus  -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                            <Setter Property="Foreground" Value="{StaticResource InputFocusForegroundBrushKey}" />
                        </Trigger>
                        <!--  Has Error  -->
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                            <Setter Property="Foreground" Value="{StaticResource InputErrorBorderBackgroundBrushKey}" />
                            <Setter Property="BorderBrush" Value="{StaticResource InputErrorBorderBackgroundBrushKey}" />
                            <Setter TargetName="exclamation" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

    </Style>

    <!--  Checkbox Input  -->
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="14,0,0,0"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type CheckBox}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{StaticResource DosisMedium}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
        <Setter Property="Foreground" Value="{StaticResource InputForegroundBrushKey}" />
        <Setter Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
        <Setter Property="BorderThickness" Value="2" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid
                        x:Name="templateRoot"
                        Background="Transparent"
                        SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="checkBoxBorder"
                            Margin="1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid x:Name="markGrid">
                                <Path
                                    x:Name="optionMark"
                                    Margin="1"
                                    Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                    Fill="{StaticResource InputForegroundBrushKey}"
                                    Opacity="0"
                                    Stretch="None" />
                                <Rectangle
                                    x:Name="indeterminateMark"
                                    Margin="2"
                                    Fill="{StaticResource InputForegroundBrushKey}"
                                    Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <!--<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.MouseOver.Background}" />-->
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource InputForegroundBrushKey}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource InputForegroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource InputDisabledBackgroundBrushKey}" />
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource InputDisabledForegroundBrushKey}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource InputDisabledForegroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <!--<Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Pressed.Background}" />-->
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource InputPressBorderBackgroundBrushKey}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource InputFocusForegroundBrushKey}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource InputFocusForegroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                            <Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="optionMark" Property="Opacity" Value="0" />
                            <Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="Width" Value="22" />
                <Setter Property="Height" Value="22" />
            </Style>
            <Style TargetType="Grid">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
        </Style.Resources>

        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                <Setter Property="BorderBrush" Value="{StaticResource InputErrorBorderBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Radio Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{StaticResource DosisMedium}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
        <Setter Property="Foreground" Value="{StaticResource InputForegroundBrushKey}" />
        <Setter Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
        <Setter Property="BorderThickness" Value="0,0,0,2" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                <Setter Property="Foreground" Value="{StaticResource InputFocusForegroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                <Setter Property="BorderBrush" Value="{StaticResource InputErrorBorderBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ComboBox Input  -->
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="templateRoot"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">
                        <Border
                            x:Name="splitBorder"
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                            Margin="0"
                            HorizontalAlignment="Right"
                            BorderBrush="Transparent"
                            BorderThickness="1"
                            SnapsToDevicePixels="true">
                            <Path
                                x:Name="arrow"
                                Margin="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
                                Fill="{StaticResource InputForegroundBrushKey}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{StaticResource InputFocusForegroundBrushKey}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{StaticResource InputFocusForegroundBrushKey}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="arrow" Property="Fill" Value="{StaticResource InputDisabledForegroundBrushKey}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource InputDisabledBackgroundBrushKey}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ComboBox}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{StaticResource DosisMedium}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
        <Setter Property="Foreground" Value="{StaticResource InputForegroundBrushKey}" />
        <Setter Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
        <Setter Property="BorderThickness" Value="0,0,0,2" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                        </Grid.ColumnDefinitions>
                        <Popup
                            x:Name="PART_Popup"
                            Grid.ColumnSpan="2"
                            Margin="1"
                            AllowsTransparency="true"
                            IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Placement="Bottom"
                            PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <!--
                            <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            -->
                            <Border
                                x:Name="dropDownBorder"
                                MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                Background="{DynamicResource InputBackgroundSolidBrushKey}"
                                BorderBrush="{DynamicResource InputBorderBackgroundBrushKey}"
                                BorderThickness="2">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas
                                            x:Name="canvas"
                                            Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                            <Rectangle
                                                x:Name="opaqueRect"
                                                Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                                Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                                Fill="{Binding Background, ElementName=dropDownBorder}" />
                                        </Canvas>
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                            <!--
                            </theme:SystemDropShadowChrome>
                            -->
                        </Popup>
                        <ToggleButton
                            x:Name="toggleButton"
                            Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxToggleButton}" />
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            IsHitTestVisible="false"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                            <!--
                            <Setter TargetName="shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="shadow" Property="Color" Value="#71000000" />
                            -->
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                        <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                            <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Grid />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!--  Hover  -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
            </Trigger>
            <!--  Focus  -->
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                <Setter Property="Foreground" Value="{StaticResource InputFocusForegroundBrushKey}" />
            </Trigger>
            <!--  Has Error  -->
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                <Setter Property="BorderBrush" Value="{StaticResource InputErrorBorderBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Integer Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type xctk:IntegerUpDown}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{StaticResource DosisMedium}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
        <Setter Property="Foreground" Value="{StaticResource InputForegroundBrushKey}" />
        <Setter Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
        <Setter Property="BorderThickness" Value="0,0,0,2" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Grid />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!--  Is Disabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource InputDisabledBackgroundBrushKey}" />
                <Setter Property="Foreground" Value="{StaticResource InputDisabledForegroundBrushKey}" />
            </Trigger>
            <!--  Hover  -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
            </Trigger>
            <!--  Focus  -->
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                <Setter Property="Foreground" Value="{StaticResource InputFocusForegroundBrushKey}" />
            </Trigger>
            <!--  Has Error  -->
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                <Setter Property="BorderBrush" Value="{StaticResource InputErrorBorderBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Double Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type xctk:DoubleUpDown}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{StaticResource DosisMedium}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
        <Setter Property="Foreground" Value="{StaticResource InputForegroundBrushKey}" />
        <Setter Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
        <Setter Property="BorderThickness" Value="0,0,0,2" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Grid />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!--  Hover  -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
            </Trigger>
            <!--  Focus  -->
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                <Setter Property="Foreground" Value="{StaticResource InputFocusForegroundBrushKey}" />
            </Trigger>
            <!--  Has Error  -->
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                <Setter Property="BorderBrush" Value="{StaticResource InputErrorBorderBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  TimeSpan Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type xctk:TimeSpanUpDown}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{StaticResource DosisMedium}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="{StaticResource InputBackgroundBrushKey}" />
        <Setter Property="Foreground" Value="{StaticResource InputForegroundBrushKey}" />
        <Setter Property="BorderBrush" Value="{StaticResource InputBorderBackgroundBrushKey}" />
        <Setter Property="BorderThickness" Value="0,0,0,2" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource InputFocusBorderBackgroundBrushKey}" />
                <Setter Property="Foreground" Value="{StaticResource InputFocusForegroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                <Setter Property="BorderBrush" Value="{StaticResource InputErrorBorderBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>